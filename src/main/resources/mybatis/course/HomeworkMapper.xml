<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yi.project.course.homework.mapper.HomeworkMapper">

    <resultMap type="Homework" id="HomeworkResult">
        <result property="homeworkId"    column="homework_id"    />
        <result property="homeworkName"    column="homework_name"    />
        <result property="chapterId"    column="chapter_id"    />
        <result property="courseId"    column="course_id"    />
        <result property="deadline"    column="deadline"    />
        <result property="content"    column="content"    />
        <result property="publish"    column="publish"    />
        <result property="createBy"    column="create_by"    />
        <result property="createTime"    column="create_time"    />
        <result property="delFlag"    column="del_flag"    />
    </resultMap>

    <resultMap id="HomeworkHomeworkAllocatResult" type="Homework" extends="HomeworkResult">
        <collection property="homeworkAllocatList" notNullColumn="allocat_id" javaType="java.util.List" resultMap="HomeworkAllocatResult" />
    </resultMap>

    <resultMap type="HomeworkAllocat" id="HomeworkAllocatResult">
        <result property="allocatId"    column="allocat_id"    />
        <result property="homeworkId"    column="homework_id"    />
        <result property="groupId"    column="group_id"    />
        <result property="receiveCount"    column="receive_count"    />
        <result property="summitCount"    column="summit_count"    />
        <result property="updateBy"    column="update_by"    />
        <result property="updateTime"    column="update_time"    />
        <result property="createBy"    column="create_by"    />
        <result property="createTime"    column="create_time"    />
    </resultMap>

    <select id="selectHomeworkList" parameterType="Homework" resultType="com.yi.project.course.homework.domain.Homework">
        SELECT
            h.homework_id, h.homework_name, h.chapter_id, h.course_id, h.deadline, h.content, h.publish, h.create_by, h.create_time, h.del_flag,
            ha.receiveCount,ha.summitCount,ha.lastUpdateTime
        FROM sku_homework h
        LEFT JOIN (
            SELECT
                homework_id,
                SUM(receive_count) AS receiveCount,
                SUM(summit_count) AS summitCount,
                MAX(update_time) AS lastUpdateTime
            FROM sku_homework_allocat
            GROUP BY homework_id
        ) ha ON ha.homework_id = h.homework_id
        <where>
            <if test="homeworkId != null "> and h.homework_id = #{homeworkId}</if>
            <if test="homeworkName != null  and homeworkName != ''"> and h.homework_name like concat('%', #{homeworkName}, '%')</if>
            <if test="chapterId != null "> and h.chapter_id = #{chapterId}</if>
            <if test="courseId != null "> and h.course_id = #{courseId}</if>
            <if test="deadline != null "> and h.deadline &gt; #{deadline}</if>
            <if test="publish != null  and publish != ''"> and h.publish = #{publish}</if>
            <if test="delFlag != null  and delFlag != ''"> and h.del_flag = #{delFlag}</if>
        </where>
        ORDER BY h.create_time DESC
    </select>

    <select id="selectMyHomeworks" parameterType="MyHomework" resultType="com.yi.project.course.homework.domain.MyHomework">
        SELECT
            h.homework_id, h.homework_name, h.chapter_id, h.course_id, h.deadline, h.content, h.publish, h.create_by, h.create_time, h.del_flag,
            ha.allocat_id, ha.homework_id, ha.group_id, ha.receive_count, ha.summit_count,
            haw.answer_id, haw.submit_time, haw.score, haw.excellent, haw.submit_time, IF(haw.answer_id,'Y','N') AS isOver
        FROM sku_homework h
        INNER JOIN sku_homework_allocat ha ON ha.homework_id = h.homework_id
        INNER JOIN sku_group_user gu ON ha.group_id = gu.group_id AND gu.user_id = #{userId}
        LEFT JOIN sku_homework_answer haw ON haw.homework_id = h.homework_id AND haw.user_id = #{userId}
        <where>
            <if test="homeworkId != null "> and h.homework_id = #{homeworkId}</if>
            <if test="homeworkName != null  and homeworkName != ''"> and h.homework_name like concat('%', #{homeworkName}, '%')</if>
            <if test="chapterId != null "> and h.chapter_id = #{chapterId}</if>
            <if test="courseId != null "> and h.course_id = #{courseId}</if>
            <if test="groupId != null "> and ha.group_id = #{groupId}</if>
            <if test="answerId != null "> and haw.answer_id = #{answerId}</if>
            <if test="params.beginSubmitTime != null and params.beginSubmitTime != '' and params.endSubmitTime != null and params.endSubmitTime != ''"> and haw.submit_time between #{params.beginSubmitTime} and #{params.endSubmitTime}</if>
            <if test="isOver != null">
                <choose>
                    <when test="isOver == 1">AND haw.answer_id IS NOT NULL</when>
                    <when test="isOver == 0">AND haw.answer_id IS NULL AND h.deadline &gt; NOW()</when>
                </choose>
            </if>
            AND h.publish = 'Y'
        </where>
        ORDER BY h.create_time DESC
    </select>

    <select id="selectHomeworkById" parameterType="Long" resultMap="HomeworkHomeworkAllocatResult">
        select a.homework_id, a.homework_name, a.chapter_id, a.course_id, a.deadline, a.content, a.publish, a.create_by, a.create_time, a.del_flag,
            b.allocat_id, b.homework_id, b.group_id, b.receive_count, b.summit_count, b.update_by, b.update_time, b.create_by, b.create_time
        from sku_homework a
        left join sku_homework_allocat b on b.homework_id = a.homework_id
        where a.homework_id = #{homeworkId}
    </select>

    <insert id="insertHomework" parameterType="Homework" useGeneratedKeys="true" keyProperty="homeworkId">
        insert into sku_homework
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="homeworkName != null and homeworkName != ''">homework_name,</if>
            <if test="chapterId != null">chapter_id,</if>
            <if test="courseId != null">course_id,</if>
            <if test="deadline != null">deadline,</if>
            <if test="content != null">content,</if>
            <if test="publish != null and publish != ''">publish,</if>
            <if test="createBy != null">create_by,</if>
            <if test="createTime != null">create_time,</if>
            <if test="delFlag != null">del_flag,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="homeworkName != null and homeworkName != ''">#{homeworkName},</if>
            <if test="chapterId != null">#{chapterId},</if>
            <if test="courseId != null">#{courseId},</if>
            <if test="deadline != null">#{deadline},</if>
            <if test="content != null">#{content},</if>
            <if test="publish != null and publish != ''">#{publish},</if>
            <if test="createBy != null">#{createBy},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="delFlag != null">#{delFlag},</if>
         </trim>
    </insert>

    <update id="updateHomework" parameterType="Homework">
        update sku_homework
        <trim prefix="SET" suffixOverrides=",">
            <if test="homeworkName != null and homeworkName != ''">homework_name = #{homeworkName},</if>
            <if test="chapterId != null">chapter_id = #{chapterId},</if>
            <if test="courseId != null">course_id = #{courseId},</if>
            <if test="deadline != null">deadline = #{deadline},</if>
            <if test="content != null">content = #{content},</if>
            <if test="publish != null and publish != ''">publish = #{publish},</if>
            <if test="createBy != null">create_by = #{createBy},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="delFlag != null">del_flag = #{delFlag},</if>
        </trim>
        where homework_id = #{homeworkId}
    </update>

    <delete id="deleteHomeworkById" parameterType="Long">
        delete from sku_homework where homework_id = #{homeworkId}
    </delete>

    <delete id="deleteHomeworkByIds" parameterType="String">
        delete from sku_homework where homework_id in
        <foreach item="homeworkId" collection="array" open="(" separator="," close=")">
            #{homeworkId}
        </foreach>
    </delete>

    <delete id="deleteHomeworkAllocatByHomeworkIds" parameterType="String">
        delete from sku_homework_allocat where homework_id in
        <foreach item="homeworkId" collection="array" open="(" separator="," close=")">
            #{homeworkId}
        </foreach>
    </delete>

    <delete id="deleteHomeworkAllocatByHomeworkId" parameterType="Long">
        DELETE FROM sku_homework_allocat
        WHERE homework_id = #{homeworkId}
        AND summit_count IS NULL OR summit_count = 0
    </delete>

    <insert id="batchHomeworkAllocat">
        insert into sku_homework_allocat(homework_id, group_id, receive_count, summit_count, update_by, update_time, create_by, create_time) values
		<foreach item="item" index="index" collection="list" separator=",">
            (#{item.homeworkId}, #{item.groupId}, #{item.receiveCount}, 0, #{item.updateBy}, #{item.updateTime}, #{item.createBy}, #{item.createTime})
        </foreach>
    </insert>

    <update id="updateHomeworkAllocat" parameterType="HomeworkAllocat">
        UPDATE sku_homework_allocat
        <trim prefix="SET" suffixOverrides=",">
            <if test="summitCount != null">summit_count = #{summitCount},</if>
            <if test="summitAdd != null">summit_count = IFNULL(summit_count, 0) + #{summitAdd},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
        </trim>
        WHERE homework_id = #{homeworkId}
            AND group_id = #{groupId}
    </update>

    <update id="deleteFlagByIds" parameterType="String">
        update sku_homework
        SET del_flag = '2'
        where homework_id  in
        <foreach item="homework_id" collection="array" open="(" separator="," close=")">
            #{homework_id}
        </foreach>
    </update>

</mapper>